[
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "model.html#get-data",
    "href": "model.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "model.html#define-model-and-fit",
    "href": "model.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model.html#get-some-information",
    "href": "model.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]"
  },
  {
    "objectID": "model.html#turn-into-vetiver-model",
    "href": "model.html#turn-into-vetiver-model",
    "title": "Model",
    "section": "Turn into Vetiver Model",
    "text": "Turn into Vetiver Model\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)"
  },
  {
    "objectID": "model.html#save-to-board",
    "href": "model.html#save-to-board",
    "title": "Model",
    "section": "Save to Board",
    "text": "Save to Board\n\n\nCode\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\n\n#model_board = board_folder(\"/data/model\", allow_pickle_read = True)\n#vetiver_pin_write(model_board, v)"
  },
  {
    "objectID": "model.html#turn-model-into-api",
    "href": "model.html#turn-model-into-api",
    "title": "Model",
    "section": "Turn model into API",
    "text": "Turn model into API\n\n\nCode\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype = True)"
  },
  {
    "objectID": "model.html#creating-dockerfile",
    "href": "model.html#creating-dockerfile",
    "title": "Model",
    "section": "Creating Dockerfile",
    "text": "Creating Dockerfile\n\n\nCode\n#from vetiver import prepare_docker\n#prepare_docker(model_board, \"penguin_model\")"
  },
  {
    "objectID": "model-db.html",
    "href": "model-db.html",
    "title": "Penguins Model",
    "section": "",
    "text": "Code\nimport duckdb\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "model-db.html#get-data",
    "href": "model-db.html#get-data",
    "title": "Penguins Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "model-db.html#define-model-and-fit",
    "href": "model-db.html#define-model-and-fit",
    "title": "Penguins Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model-db.html#get-some-information",
    "href": "model-db.html#get-some-information",
    "title": "Penguins Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Documentation\nShoutout to Dr.Â Hauschild for all her help on this project.\nC2C Curtis and I worked extensively on this project together."
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "eda.html#penguin-size-vs-mass-by-species",
    "href": "eda.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "classification.html",
    "href": "classification.html",
    "title": "Penguins Tree Models",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidymodels)\nlibrary(randomForest)\nlibrary(rpart.plot)\n\ntidymodels_prefer()\n\npenguin_data &lt;- palmerpenguins::penguins\ndf &lt;- na.omit(penguin_data)\n\n\n\n\n\n\n\nCode\nset.seed(2025)\n\npenguins_split &lt;- initial_split(df,prop = 0.8, strata = species)\n\npenguins_train &lt;- training(penguins_split)\npenguins_test &lt;- testing(penguins_split)"
  },
  {
    "objectID": "classification.html#initialize-penguin-data",
    "href": "classification.html#initialize-penguin-data",
    "title": "Penguins Tree Models",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidymodels)\nlibrary(randomForest)\nlibrary(rpart.plot)\n\ntidymodels_prefer()\n\npenguin_data &lt;- palmerpenguins::penguins\ndf &lt;- na.omit(penguin_data)\n\n\n\n\n\n\n\nCode\nset.seed(2025)\n\npenguins_split &lt;- initial_split(df,prop = 0.8, strata = species)\n\npenguins_train &lt;- training(penguins_split)\npenguins_test &lt;- testing(penguins_split)"
  },
  {
    "objectID": "classification.html#simple-classification-tree",
    "href": "classification.html#simple-classification-tree",
    "title": "Penguins Tree Models",
    "section": "Simple Classification Tree",
    "text": "Simple Classification Tree\n\nCreate Simple Tree and Fit\n\n\nCode\nclass_tree_spec &lt;- decision_tree() %&gt;%      \n  set_engine(\"rpart\") %&gt;%      \n  set_mode(\"classification\")\n\nclass_tree_fit &lt;- class_tree_spec %&gt;% \n  fit(species~., data = penguins_train)\n\n\n\n\nPlot Fitted Tree\n\n\nCode\nclass_tree_fit %&gt;%\n  extract_fit_engine() %&gt;%\n  rpart.plot()\n\n\n\n\n\n\n\n\n\n\n\nGet Accuracy of Tree\n\n\nCode\naugment(class_tree_fit, new_data = penguins_test) %&gt;%      \n  accuracy(truth = species, estimate = .pred_class)\n\n\n# A tibble: 1 Ã 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.941"
  },
  {
    "objectID": "classification.html#bagging-approach",
    "href": "classification.html#bagging-approach",
    "title": "Penguins Tree Models",
    "section": "Bagging Approach",
    "text": "Bagging Approach\n\nCreate Bagging Model and Fit\n\n\nCode\nbagging_spec &lt;- rand_forest(mtry = .cols()) %&gt;%      \n  set_engine(\"randomForest\", importance = TRUE) %&gt;%      \n  set_mode(\"classification\")\n\nbagging_fit &lt;- bagging_spec %&gt;%    \n  fit(species ~ ., data = penguins_train)\n\n\nNote the default number of trees is 500\n\n\nShow Important Predictors\nSince Bagging uses an ensemble of trees (in this case 500), we are unable to plot them\n\n\nCode\nlibrary(vip)\nbagging_fit %&gt;%       \n  extract_fit_engine() %&gt;%       \n  vip()\n\n\n\n\n\n\n\n\n\n\n\nGet Accuracy of Tree\n\n\nCode\naugment(bagging_fit, new_data = penguins_test) %&gt;%      \n  accuracy(truth = species, estimate = .pred_class)\n\n\n# A tibble: 1 Ã 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass         1\n\n\nSeems as if the species in penguin data is easy to predict"
  },
  {
    "objectID": "eda-db.html",
    "href": "eda-db.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(dbplyr)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "eda-db.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda-db.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(dbplyr)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "eda-db.html#penguin-mass-vs-bill-length-by-species",
    "href": "eda-db.html#penguin-mass-vs-bill-length-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Mass vs Bill Length by Species",
    "text": "Penguin Mass vs Bill Length by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")+\n  labs(x = \"Bill Length (mm)\", y = \"Body Mass (g)\", title = \"Penguin Size vs Bill Length by Species\")"
  },
  {
    "objectID": "eda-db.html#penguin-mass-spread-by-species",
    "href": "eda-db.html#penguin-mass-spread-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Mass Spread by Species",
    "text": "Penguin Mass Spread by Species\n\n\nCode\nggplot(df, aes(x = species, y = body_mass_g, fill = species)) + \n  geom_boxplot() +\n  scale_fill_manual(values=c(\"Adelie\"=\"red\", \"Chinstrap\"=\"green\", \"Gentoo\"=\"blue\")) +\n  labs(x = \"Species\", y = \"Body Mass (g)\", title = \"Box Plot of Penguin Body Mass by Species\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nDBI::dbDisconnect(con)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Final Project",
    "section": "",
    "text": "C2C Ethan Stroupâs Final Project for Math 378\n\nknitr::include_graphics(\"./penguin.jpg\")\n\n\n\n\n\n\n\n\nPenguins Model uses a Python script to perform linear regression on the Penguins data set, using bill length to predict body mass.\nPenguins EDA uses an R script to present trends on penguin size vs mass based on penguin species.\nPenguins Tree Models uses an R script to fit various classifications trees to the data set, predicting the species based on all other variable"
  }
]